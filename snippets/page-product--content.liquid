{% assign variant_tmp = product.selected_or_first_available_variant  %}
{% for variant in product.variants %}
{% if variant.available == true and variant.price < variant_tmp.price %}
{% assign variant_tmp = variant %}  
{% endif %}
{% endfor %}

{% unless current_collection %}
{% assign current_collection = collection %}
{% endunless %}

{% assign on_sale = false %}
{% if product.compare_at_price > product.price %}
{% assign on_sale = true %}
{% endif %}

{% assign sold_out = true %}
{% if product.available  %}
{% assign sold_out = false %}
{% endif %}


{% assign content_product_class = 'has-sidebar col-md-9' %}
{% assign content_product_childclass = 'col-md-6 col-sm-12 col-xs-12 ' %}

{% if settings.product_style_option == 'product_style_option_leftsidebar' or page_style == 'leftsidebar'  %}
 {% assign content_product_class = 'has-sidebar col-md-9 col-md-offset-3' %}
{% endif %}

{% if page_style == 'rightsidebar'  %}
  {% assign content_product_class = 'has-sidebar col-md-9' %}
{% endif %}

{% if settings.product_style_option == 'product_style_option_nosidebar' or page_style == 'nosidebar'  %}
 {% assign content_product_class = 'none-sidebar col-md-12' %}
 {% assign content_product_childclass = 'col-md-6 col-sm-6 col-xs-12' %}
{% endif %}


<div class="grid-item grid-border--left content-product-detail {{content_product_class}} info-product-detail ">    

<div class="row" itemscope itemtype="http://schema.org/Product">
  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  <div class="product-thumbnail-slider-wrapper {{content_product_childclass}}">
    {% include 'product--image' %}
    {% if settings.social_sharing_products %}
      
      <div class="row">
        <div class="col-xs-12">
          <div class="text-center">{% include 'social-sharing-ul' %}</div>
        </div>
      </div>
    {% endif %}
  </div>

  <div class="{{content_product_childclass}}">

    <h1 itemprop="name" class="title-product-detail">{{ product.title }}</h1>

    <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">

      {% assign variant = product.selected_or_first_available_variant %}

      <meta itemprop="priceCurrency" content="{{ shop.currency }}">
      <meta itemprop="price" content="{{ variant.price | money }}">

      {% if settings.product_reviews_enable %}
      <div class="product-meta--review rating ">
        <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>
      </div>
      {% endif %}

      <div class="desc">
      <h5> {{ 'products.product.description' | t }}</h5>
        
        {% if product.description contains '[jvcountdown]' %}
            {% assign des = product.description | split:'[/jvcountdown]' | last %}
            
            {{ des | split: '|' | first | strip_html | truncatewords: 50 }}
          {%else %}
            {{ product.description | split: '|' | first | strip_html | truncatewords: 50 }}
        {%endif %}

      </div>


      {% include 'product--price-section' %}

      <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

      {% include 'product--addtocart' %}
     
      {% include 'product--detail-others' %}
      
      <div class="product--detail-countdown">
        {% include 'product-item--countdown' with countdown_wrap:"countdown--small" %}
      </div>

    </div>

  </div>

</div>     

  {% include 'product--extra-info' %}



{% if settings.related_products_enable or settings.featured_prod_visible %}
  {% assign grid_item_width = 'col-xs-12' %}
  {% include 'products--tab-related' %}
{% endif %}


{% include 'product--bottom-nav' %}


</div>


    {{ 'option_selection.js' | shopify_asset_url | script_tag }}
    <script>

      // Pre-loading product images, to avoid a lag when a thumbnail is clicked, or
      // when a variant is selected that has a variant image.
      Shopify.Image.preload({{ product.images | json }}, 'large');

      var selectCallback = function(variant, selector) {


        // BEGIN SWATCHES
        if (variant) {
          var form = jQuery('#' + selector.domIdPrefix).closest('form');
          for (var i=0,length=variant.options.length; i<length; i++) {
            var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] +'"]');
            if (radioButton.size()) {
              radioButton.get(0).checked = true;
            }
          }
        }
        // END SWATCHES
        

        var $addToCart = $('#addToCart'),
            $productPrice = $('#productPrice'),
            $comparePrice = $('#comparePrice'),
            $variantQuantity = $('#variantQuantity'),
            //to hide jvbigC quantity-wrapper
            $quantityElements = $('.quantity-wrapper, .quantity-selector, label + .js-qty'),
            $addToCartText = $('#addToCartText'),
            $featuredImage = $('#productPhotoImg');

        if (variant) {
          // Update variant image, if one is set
          // Call timber.switchImage function in shop.js
          if (variant.featured_image) {
            var newImg = variant.featured_image,
                el = $featuredImage[0];
            $(function() {
              Shopify.Image.switchImage(newImg, el, timber.switchImage);
            });
          }

          // Select a valid variant if available
          if (variant.available) {
            // We have a valid product variant, so enable the submit button
            $addToCart.removeClass('disabled').prop('disabled', false);
            $addToCartText.html({{ 'products.product.add_to_cart' | t | json }});

            // Show how many items are left, if below 10
            {% if settings.product_quantity_message %}
            if (variant.inventory_management) {
              if (variant.inventory_quantity < 10 && variant.inventory_quantity > 0) {
                $variantQuantity.html({{ 'products.product.only_left' | t: count: '1' | json }}.replace('1', variant.inventory_quantity)).addClass('is-visible');
              } else {
                $variantQuantity.removeClass('is-visible');
              }
            }
            else {
              $variantQuantity.removeClass('is-visible');
            }
            {% endif %}


            $quantityElements.show();
          } else {
            // Variant is sold out, disable the submit button
            $addToCart.addClass('disabled').prop('disabled', true);
            $addToCartText.html({{ 'products.product.sold_out' | t | json }});
            $variantQuantity.removeClass('is-visible');
            $quantityElements.hide();
          }

          // Regardless of stock, update the product price
          // var customPriceFormat = timber.formatMoney( Shopify.formatMoney(variant.price, "{{ shop.money_format }}") );
          var customPriceFormat = Shopify.formatMoney(variant.price, "{{ shop.money_format }}") ;
          $productPrice.html(customPriceFormat);

          // Also update and show the product's compare price if necessary
          if ( variant.compare_at_price > variant.price ) {
          // var priceSaving = timber.formatSaleTag( Shopify.formatMoney(variant.compare_at_price - variant.price, "{{ shop.money_format }}") );
          var priceSaving = Shopify.formatMoney(variant.compare_at_price - variant.price, "{{ shop.money_format }}") ;
          {% comment %}
            priceSaving += ' (' + ( (variant.compare_at_price - variant.price)*100/(variant.compare_at_price) ).toFixed(0) + '%)';
          {% endcomment %}
            $comparePrice.html({{ 'products.general.save_html' | t: saved_amount: '[$]' | json }}.replace('[$]', priceSaving)).show();
          } else {
            $comparePrice.hide();
          }

        } else {
          // The variant doesn't exist, disable submit button.
          // This may be an error or notice that a specific variant is not available.
          $addToCart.addClass('disabled').prop('disabled', true);
          $addToCartText.html({{ 'products.product.unavailable' | t | json }});
          $variantQuantity.removeClass('is-visible');
          $quantityElements.hide();
        }

      };

      jQuery(function($) {
        new Shopify.OptionSelectors('productSelect', {
          product: {{ product | json }},
          onVariantSelected: selectCallback,
          enableHistoryState: true
        });

        // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
        {% if product.options.size == 1 and product.options.first != 'Title' %}
        $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first | escape }}</label>');
        {% endif %}

        // Hide selectors if we only have 1 variant and its title contains 'Default'.
        {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
          $('.selector-wrapper').hide();
        {% else %}
        $('#variantBreak').removeClass('hr--clear');
        {% endif %}
      });
    </script>

  {% if settings.product_image_zoom_enable %} 
    {{ 'jquery.zoom.min.js' | asset_url | script_tag }}
  {% endif %}    